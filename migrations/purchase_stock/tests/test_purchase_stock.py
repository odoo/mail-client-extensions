# -*- coding: utf-8 -*-
from odoo.tests import Form

from odoo.addons.base.maintenance.migrations import util
from odoo.addons.base.maintenance.migrations.testing import UpgradeCase, change_version


@change_version("saas~12.4")
class TestPurchaseStock(UpgradeCase):
    def _prepare_test_1_single_currency(self, env_user):
        """Prepare an invoice using anglo-saxon accounting in single-currency with the following entries:

              account           |   price_unit  |   debit   |   credit  |
        -----------------------------------------------------------------
        stock input account     |          12.0 |       9.0 |           |   (invoice line)
        price diff account      |               |       3.0 |           |

        :param env_user:    Odoo environment with testing user.
        :return:            The account.move id generated by the account.invoice.
        """

        # Purchase order.
        po_form = Form(env_user["purchase.order"])
        po_form.partner_id = self.partner
        with po_form.order_line.new() as line_form:
            line_form.product_id = self.product
            line_form.product_qty = 1.0
            line_form.price_unit = 9.0
        po = po_form.save()

        po.button_approve()

        # Vendor bill.
        invoice_form = Form(
            env_user["account.invoice"].with_context(type="in_invoice"), view="account.invoice_supplier_form"
        )
        invoice_form.partner_id = self.partner
        invoice_form.purchase_id = po
        with invoice_form.invoice_line_ids.edit(0) as line_form:
            line_form.quantity = 1.0
            line_form.price_unit = 12.0
            line_form.invoice_line_tax_ids.clear()
            line_form.invoice_line_tax_ids.add(self.tax_purchase)
        invoice = invoice_form.save()
        invoice.action_invoice_open()

        product_move_lines = invoice.move_id.line_ids.filtered("product_id").sorted("balance")
        self.assertEqual(len(product_move_lines), 2)
        self.assertRecordValues(
            invoice,
            [
                {
                    "amount_untaxed": 12.0,
                    "amount_untaxed_signed": 12.0,
                }
            ],
        )
        self.assertEqual(product_move_lines[0].account_id, self.account_stock_price_diff)
        self.assertEqual(product_move_lines[0].balance, 3.0)
        self.assertEqual(product_move_lines[1].account_id, self.account_stock_in)
        self.assertEqual(product_move_lines[1].balance, 9.0)
        return invoice.move_id.id

    def _check_test_1_single_currency(self, config, invoice):
        """Check the invoice created in '_prepare_test_1_single_currency'. The journal items should now be like that:

              account           |   price_unit  |   debit   |   credit  |   anglo-saxon flag    |
        -----------------------------------------------------------------------------------------
        stock input account     |          12.0 |      12.0 |           |                     f |   (invoice line)
        stock input account     |               |           |       3.0 |                     t |
        price diff account      |               |       3.0 |           |                     t |

        :param config:      A dictionary containing the config before the migration.
        :param invoice:     The invoice as an account.move.
        """

        self.assertRecordValues(
            invoice,
            [
                {
                    "amount_untaxed": 12.0,
                    "amount_untaxed_signed": -12.0,
                }
            ],
        )
        self.assertRecordValues(
            invoice.line_ids.filtered("product_id").sorted(lambda line: (line.account_id.id, line.balance)),
            [
                {
                    "account_id": config["account_stock_in_id"],
                    "price_unit": -3.0,
                    "balance": -3.0,
                    "tax_ids": [],
                    "tag_ids": [],
                    "is_anglo_saxon_line": True,
                    "tax_audit": "",
                },
                {
                    "account_id": config["account_stock_in_id"],
                    "price_unit": 12.0,
                    "balance": 12.0,
                    "tax_ids": [config["tax_purchase_id"]],
                    "tag_ids": [config["tag_base_id"]],
                    "is_anglo_saxon_line": False,
                    "tax_audit": "tag_1: $ 12.00",
                },
                {
                    "account_id": config["account_stock_price_diff_id"],
                    "price_unit": 0.0,
                    "balance": 3.0,
                    "tax_ids": [],
                    "tag_ids": [],
                    "is_anglo_saxon_line": True,
                    "tax_audit": "",
                },
            ],
        )
        self.assertRecordValues(
            invoice.line_ids.filtered("tax_line_id"),
            [
                {
                    "account_id": config["account_stock_in_id"],
                    "tax_ids": [],
                    "tag_ids": [config["tag_tax_id"]],
                    "tax_audit": "tag_2: $ 1.80",
                },
            ],
        )

    def _prepare_test_2_foreign_currency(self, env_user):
        """Prepare an invoice using anglo-saxon accounting using a foreign currency with the following entries:

              account           |   price_unit  |   amount_currency     |  debit    |   credit  |
        -----------------------------------------------------------------------------------------
        stock input account     |          12.0 |                   9.0 |       4.5 |           |   (invoice line)
        price diff account      |               |                   3.0 |       1.5 |           |

        :param env_user:    Odoo environment with testing user.
        :return:            The account.move id generated by the account.invoice.
        """

        # Purchase order.
        po_form = Form(env_user["purchase.order"])
        po_form.partner_id = self.partner
        po_form.currency_id = self.gold_currency
        with po_form.order_line.new() as line_form:
            line_form.product_id = self.product
            line_form.product_qty = 1.0
            line_form.price_unit = 9.0
        po = po_form.save()

        po.button_approve()

        # Vendor bill.
        invoice_form = Form(
            env_user["account.invoice"].with_context(type="in_invoice"), view="account.invoice_supplier_form"
        )
        invoice_form.partner_id = self.partner
        invoice_form.purchase_id = po
        with invoice_form.invoice_line_ids.edit(0) as line_form:
            line_form.quantity = 1.0
            line_form.price_unit = 12.0
            line_form.invoice_line_tax_ids.clear()
            line_form.invoice_line_tax_ids.add(self.tax_purchase)
        invoice = invoice_form.save()
        invoice.action_invoice_open()

        product_move_lines = invoice.move_id.line_ids.filtered("product_id").sorted("balance")
        self.assertEqual(len(product_move_lines), 2)
        self.assertRecordValues(
            invoice,
            [
                {
                    "amount_untaxed": 12.0,
                    "amount_untaxed_signed": 6.0,
                }
            ],
        )
        self.assertEqual(product_move_lines[0].account_id, self.account_stock_price_diff)
        self.assertEqual(product_move_lines[0].amount_currency, 3.0)
        self.assertEqual(product_move_lines[0].balance, 1.5)
        self.assertEqual(product_move_lines[1].account_id, self.account_stock_in)
        self.assertEqual(product_move_lines[1].amount_currency, 9.0)
        self.assertEqual(product_move_lines[1].balance, 4.5)
        return invoice.move_id.id

    def _check_test_2_foreign_currency(self, config, invoice):
        """Check the invoice created in '_prepare_test_2_foreign_currency'. The journal items should now be like that:

              account           |   price_unit  |   debit   |   credit  |   anglo-saxon flag    |
        -----------------------------------------------------------------------------------------
        stock input account     |          12.0 |      12.0 |           |                     f |   (invoice line)
        stock input account     |               |           |      12.0 |                     t |
        price diff account      |               |      12.0 |           |                     t |

        :param config:      A dictionary containing the config before the migration.
        :param invoice:     The invoice as an account.move.
        """

        self.assertRecordValues(
            invoice,
            [
                {
                    "amount_untaxed": 12.0,
                    "amount_untaxed_signed": -6.0,
                }
            ],
        )
        self.assertRecordValues(
            invoice.line_ids.filtered("product_id").sorted(lambda line: (line.account_id.id, line.balance)),
            [
                {
                    "account_id": config["account_stock_in_id"],
                    "price_unit": -3.0,
                    "amount_currency": -3.0,
                    "balance": -1.5,
                    "tax_ids": [],
                    "tag_ids": [],
                    "is_anglo_saxon_line": True,
                    "tax_audit": "",
                },
                {
                    "account_id": config["account_stock_in_id"],
                    "price_unit": 12.0,
                    "amount_currency": 12.0,
                    "balance": 6.0,
                    "tax_ids": [config["tax_purchase_id"]],
                    "tag_ids": [config["tag_base_id"]],
                    "is_anglo_saxon_line": False,
                    "tax_audit": "tag_1: $ 6.00",
                },
                {
                    "account_id": config["account_stock_price_diff_id"],
                    "price_unit": 0.0,
                    "amount_currency": 3.0,
                    "balance": 1.5,
                    "tax_ids": [],
                    "tag_ids": [],
                    "is_anglo_saxon_line": True,
                    "tax_audit": "",
                },
            ],
        )
        self.assertRecordValues(
            invoice.line_ids.filtered("tax_line_id"),
            [
                {
                    "account_id": config["account_stock_in_id"],
                    "tax_ids": [],
                    "tag_ids": [config["tag_tax_id"]],
                    "tax_audit": "tag_2: $ 0.90",
                },
            ],
        )

    def _prepare_test_3_confusing_invoice_line_move_line_mapping(self, env_user):
        """Prepare an invoice using anglo-saxon accounting in single-currency with the following entries:

              account           |   price_unit  |   debit   |   credit  |
        -----------------------------------------------------------------
        stock input account     |          24.0 |      12.0 |           |   (invoice line)
        price diff account      |               |      12.0 |           |

        This test is there to ensure the mapping account.invoice.line <-> account.move.line is not wrongly taking
        the price difference line instead of the stock input line.

        :param env_user:    Odoo environment with testing user.
        :return:            The account.move id generated by the account.invoice.
        """

        # Purchase order.
        po_form = Form(env_user["purchase.order"])
        po_form.partner_id = self.partner
        with po_form.order_line.new() as line_form:
            line_form.product_id = self.product
            line_form.product_qty = 1.0
            line_form.price_unit = 24.0
        po = po_form.save()

        po.button_approve()

        # Vendor bill.
        invoice_form = Form(
            env_user["account.invoice"].with_context(type="in_invoice"), view="account.invoice_supplier_form"
        )
        invoice_form.partner_id = self.partner
        invoice_form.purchase_id = po
        with invoice_form.invoice_line_ids.edit(0) as line_form:
            line_form.quantity = 1.0
            line_form.price_unit = 12.0
            line_form.invoice_line_tax_ids.clear()
            line_form.invoice_line_tax_ids.add(self.tax_purchase)
        invoice = invoice_form.save()
        invoice.action_invoice_open()

        product_move_lines = invoice.move_id.line_ids.filtered("product_id").sorted("balance")
        self.assertEqual(len(product_move_lines), 2)
        self.assertRecordValues(
            invoice,
            [
                {
                    "amount_untaxed": 12.0,
                    "amount_untaxed_signed": 12.0,
                }
            ],
        )
        self.assertEqual(product_move_lines[0].account_id, self.account_stock_price_diff)
        self.assertEqual(product_move_lines[0].balance, -12.0)
        self.assertEqual(product_move_lines[1].account_id, self.account_stock_in)
        self.assertEqual(product_move_lines[1].balance, 24.0)
        return invoice.move_id.id

    def _check_test_3_confusing_invoice_line_move_line_mapping(self, config, invoice):
        """Check the invoice created in '_prepare_test_1_single_currency'. The journal items should now be like that:

              account           |   price_unit  |   debit   |   credit  |   anglo-saxon flag    |
        -----------------------------------------------------------------------------------------
        stock input account     |          24.0 |      12.0 |           |                     f |   (invoice line)
        stock input account     |               |           |      12.0 |                     t |
        price diff account      |               |      12.0 |           |                     t |

        :param config:      A dictionary containing the config before the migration.
        :param invoice:     The invoice as an account.move.
        """

        self.assertRecordValues(
            invoice,
            [
                {
                    "amount_untaxed": 12.0,
                    "amount_untaxed_signed": -12.0,
                }
            ],
        )
        self.assertRecordValues(
            invoice.line_ids.filtered("product_id").sorted(lambda line: (line.account_id.id, line.balance)),
            [
                {
                    "account_id": config["account_stock_in_id"],
                    "price_unit": 12.0,
                    "balance": 12.0,
                    "tax_ids": [config["tax_purchase_id"]],
                    "tag_ids": [config["tag_base_id"]],
                    "is_anglo_saxon_line": False,
                    "tax_audit": "tag_1: $ 12.00",
                },
                {
                    "account_id": config["account_stock_in_id"],
                    "price_unit": 12.0,
                    "balance": 12.0,
                    "tax_ids": [],
                    "tag_ids": [],
                    "is_anglo_saxon_line": True,
                    "tax_audit": "",
                },
                {
                    "account_id": config["account_stock_price_diff_id"],
                    "price_unit": 0.0,
                    "balance": -12.0,
                    "tax_ids": [],
                    "tag_ids": [],
                    "is_anglo_saxon_line": True,
                    "tax_audit": "",
                },
            ],
        )
        self.assertRecordValues(
            invoice.line_ids.filtered("tax_line_id"),
            [
                {
                    "account_id": config["account_stock_in_id"],
                    "tax_ids": [],
                    "tag_ids": [config["tag_tax_id"]],
                    "tax_audit": "tag_2: $ 1.80",
                },
            ],
        )

    def prepare(self):
        # When the migration is made directly from an older version than saas-12.3, this test won't work because the
        # tax configuration is completely different.
        if not util.version_gte("saas~12.3"):
            self.skipTest("TestPurchaseStock skipped because the current version is older than saas-12.3.")

        company = self.env["res.company"].create(
            {
                "name": "company for TestPurchaseStock",
                "country_id": self.env.ref("base.be").id,
            }
        )

        # Create user.
        user = (
            self.env["res.users"]
            .with_context(no_reset_password=True)
            .create(
                {
                    "name": "user TestPurchaseStock",
                    "login": "TestPurchaseStock",
                    "groups_id": [
                        (6, 0, self.env.user.groups_id.ids),
                        (4, self.env.ref("account.group_account_user").id),
                    ],
                    "company_ids": [(6, 0, company.ids)],
                    "company_id": company.id,
                }
            )
        )
        user.partner_id.email = "TestPurchaseStock@test.com"

        env_user = user.sudo(user).env

        chart_template = env_user.ref("l10n_generic_coa.configurable_chart_template", raise_if_not_found=False)
        if not chart_template:
            self.skipTest("TestPurchaseStock skipped because the user's company has no chart of accounts.")

        chart_template.try_loading_for_current_company()

        # Enable anglo_saxon accounting.
        company.anglo_saxon_accounting = True

        # Setup taxes.
        self.tags = env_user["account.account.tag"].create(
            [
                {"name": "tag_1", "applicability": "taxes", "country_id": company.country_id.id},
                {"name": "tag_2", "applicability": "taxes", "country_id": company.country_id.id},
            ]
        )
        self.tax_purchase = env_user["account.tax"].create(
            {
                "name": "Tax TestPurchaseStock",
                "amount_type": "percent",
                "type_tax_use": "purchase",
                "amount": 15,
                "invoice_repartition_line_ids": [
                    (
                        0,
                        0,
                        {
                            "factor_percent": 100,
                            "repartition_type": "base",
                            "tag_ids": [(6, 0, [self.tags[0].id])],
                        },
                    ),
                    (
                        0,
                        0,
                        {
                            "factor_percent": 100,
                            "repartition_type": "tax",
                            "tag_ids": [(6, 0, [self.tags[1].id])],
                        },
                    ),
                ],
                "refund_repartition_line_ids": [
                    (
                        0,
                        0,
                        {
                            "factor_percent": 100,
                            "repartition_type": "base",
                            "tag_ids": [(6, 0, [self.tags[0].id])],
                        },
                    ),
                    (
                        0,
                        0,
                        {
                            "factor_percent": 100,
                            "repartition_type": "tax",
                            "tag_ids": [(6, 0, [self.tags[1].id])],
                        },
                    ),
                ],
            }
        )

        company.account_purchase_tax_id = self.tax_purchase

        # Setup accounts.
        self.account_expense = env_user["account.account"].search(
            [
                ("company_id", "=", company.id),
                ("user_type_id", "=", env_user.ref("account.data_account_type_expenses").id),
            ],
            limit=1,
        )
        self.account_payable = env_user["account.account"].search(
            [("company_id", "=", company.id), ("user_type_id.type", "=", "payable")], limit=1
        )
        self.account_stock_in = env_user["account.account"].create(
            {
                "name": "account_stock_in",
                "code": "STOCKIN",
                "reconcile": True,
                "user_type_id": env_user.ref("account.data_account_type_current_assets").id,
                "company_id": company.id,
            }
        )
        self.account_stock_out = env_user["account.account"].create(
            {
                "name": "account_stock_out",
                "code": "STOCKOUT",
                "reconcile": True,
                "user_type_id": env_user.ref("account.data_account_type_current_assets").id,
                "company_id": company.id,
            }
        )
        self.account_stock_valuation = env_user["account.account"].create(
            {
                "name": "account_stock_valuation",
                "code": "STOCKVAL",
                "reconcile": True,
                "user_type_id": env_user.ref("account.data_account_type_current_assets").id,
                "company_id": company.id,
            }
        )
        self.account_stock_price_diff = env_user["account.account"].create(
            {
                "name": "account_stock_price_diff",
                "code": "STOCKPDIFF",
                "reconcile": True,
                "user_type_id": env_user.ref("account.data_account_type_current_assets").id,
                "company_id": company.id,
            }
        )

        # Setup product.
        self.stock_account_product_categ = env_user["product.category"].create(
            {
                "name": "Test category",
                "property_valuation": "real_time",
                "property_cost_method": "fifo",
                "property_stock_valuation_account_id": self.account_stock_valuation.id,
                "property_stock_account_input_categ_id": self.account_stock_in.id,
                "property_stock_account_output_categ_id": self.account_stock_out.id,
                "property_account_creditor_price_difference_categ": self.account_stock_price_diff.id,
            }
        )

        self.uom_unit = env_user.ref("uom.product_uom_unit")
        self.product = env_user["product.product"].create(
            {
                "name": "Test product TestPurchaseStock",
                "type": "product",
                "categ_id": self.stock_account_product_categ.id,
                "uom_id": self.uom_unit.id,
                "uom_po_id": self.uom_unit.id,
                "property_account_expense_id": self.account_expense.id,
            }
        )

        # Setup partner.
        self.partner = env_user["res.partner"].create(
            {
                "name": "Test partner TestPurchaseStock",
                "property_account_payable_id": self.account_payable.id,
                "company_id": company.id,
            }
        )

        # Setup multi-currency.
        self.gold_currency = self.env["res.currency"].create(
            {
                "name": "Gold Coin",
                "symbol": "☺",
                "rounding": 0.01,
                "position": "after",
                "currency_unit_label": "Gold",
                "currency_subunit_label": "Silver",
            }
        )
        self.rate = self.env["res.currency.rate"].create(
            {
                "name": "2016-01-01",
                "rate": 2.0,
                "currency_id": self.gold_currency.id,
                "company_id": company.id,
            }
        )

        return {
            "tests": [
                self._prepare_test_1_single_currency(env_user),
                self._prepare_test_2_foreign_currency(env_user),
                self._prepare_test_3_confusing_invoice_line_move_line_mapping(env_user),
            ],
            "config": {
                "tax_purchase_id": self.tax_purchase.id,
                "account_stock_in_id": self.account_stock_in.id,
                "account_stock_price_diff_id": self.account_stock_price_diff.id,
                "tag_base_id": self.tags[0].id,
                "tag_tax_id": self.tags[1].id,
            },
        }

    def check(self, init):
        moves = self.env["account.move"].browse(init["tests"])
        self._check_test_1_single_currency(init["config"], moves[0])
        self._check_test_2_foreign_currency(init["config"], moves[1])
        self._check_test_3_confusing_invoice_line_move_line_mapping(init["config"], moves[2])
