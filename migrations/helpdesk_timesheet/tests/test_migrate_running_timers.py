try:
    from odoo import Command
except ImportError:
    pass

from odoo.addons.base.maintenance.migrations.testing import UpgradeCase, change_version


@change_version("saas~18.3")
class TestMigrateRunningTimers(UpgradeCase):
    def prepare(self):
        # Create user with an employee for that user.
        user_vals = {
            "name": "Helpdesk Timesheet User",
            "login": "helpdesk_timesheet_user",
            "email": "user@helpdesk_timesheet.com",
        }
        if "group_ids" in self.env["res.users"]._fields:
            user_vals["group_ids"] = [
                Command.set(
                    [
                        self.env.ref("hr_timesheet.group_hr_timesheet_user").id,
                        self.env.ref("helpdesk.group_helpdesk_user").id,
                    ]
                ),
            ]
        else:
            user_vals["groups_id"] = [
                Command.set(
                    [
                        self.env.ref("hr_timesheet.group_hr_timesheet_user").id,
                        self.env.ref("helpdesk.group_helpdesk_user").id,
                    ]
                ),
            ]
        user = self.env["res.users"].create(user_vals)
        employee = self.env["hr.employee"].create(
            {
                "name": "User Empl Employee",
                "user_id": user.id,
            }
        )

        # Create a project with `allow_timesheets=True`.
        project = self.env["project.project"].create(
            {
                "name": "Project 1",
                "allow_timesheets": True,
            }
        )
        # Create a task in that project.
        helpdesk_team = self.env["helpdesk.team"].create(
            {
                "name": "Helpdesk Team",
                "project_id": project.id,
                "use_helpdesk_timesheet": True,
            }
        )
        ticket = self.env["helpdesk.ticket"].create(
            {
                "name": "Ticket",
                "team_id": helpdesk_team.id,
            }
        )
        # Start a timer in that task with the user created.
        ticket.with_user(user).action_timer_start()

        # Create a timesheet without a task.
        timesheet_without_task = self.env["account.analytic.line"].create(
            {
                "name": "Timesheet 1",
                "employee_id": employee.id,
                "project_id": project.id,
            }
        )
        timesheet_without_task.with_user(user).action_timer_start()
        return user.id, employee.id, project.id, ticket.id, timesheet_without_task.id

    def check(self, init):
        user_id, employee_id, project_id, ticket_id, timesheet_without_task_id = init
        timers = self.env["timer.timer"].search(
            [
                ("user_id", "=", user_id),
                "|",
                ("res_id", "=", timesheet_without_task_id),
                ("parent_res_id", "=", ticket_id),
            ]
        )
        self.assertEqual(len(timers), 1, "Only one timer should be found.")
        self.assertEqual(timers.res_id, timesheet_without_task_id, "The timer should be the one of the timesheet.")
        self.assertEqual(timers.res_model, "account.analytic.line", "The timer should be the one of the timesheet.")
        self.assertFalse(
            timers.parent_res_id,
            "No parent_res_id should be set since the timesheet is not linked to a ticket or a task.",
        )
        self.assertFalse(
            timers.parent_res_model,
            "No parent_res_model should be set since the timesheet is not linked to a ticket or a task",
        )
        timesheets = self.env["account.analytic.line"].search([("helpdesk_ticket_id", "=", ticket_id)])
        self.assertEqual(len(timesheets), 1, "A timesheet should be generated by the timer started in the ticket.")
        self.assertEqual(
            timesheets.employee_id.id,
            employee_id,
            "The employee set on the new timesheet should be the one of the user who started the timer.",
        )
        self.assertGreater(timesheets.unit_amount, 0, "The time elapsed should taken into account.")
        self.assertEqual(
            timesheets.project_id.id,
            project_id,
            "The project set on the newest timesheet should be the one of the task.",
        )
