# -*- coding: utf-8 -*-

from odoo.addons.base.maintenance.migrations.testing import UpgradeCase, change_version


@change_version("saas~16.5")
class TestEndOfQtyDone(UpgradeCase):
    """write a test for a migration script in saas-16.5
    It does:
    - Create some receipts and deliveries.
    - In deliveries some quantities as picked with the qty_done field.
    - Run the migration script.
    - Check the picked field is set to True for the deliveries and the receipts with previously qty_done set.
    - Check other deliveries and receipts have the picked field set to False and are unreserved.
    - Check the mapping to the stock.quant is correct
    """

    def prepare(self):
        self.stock_location = self.env.ref("stock.stock_location_stock")
        self.customer_location = self.env.ref("stock.stock_location_customers")
        self.supplier_location = self.env.ref("stock.stock_location_suppliers")
        self.uom_unit = self.env.ref("uom.product_uom_unit")
        self.uom_dozen = self.env.ref("uom.product_uom_dozen")
        self.product = self.env["product.product"].create({"name": "product", "type": "product"})
        self.product_consu = self.env["product.product"].create({"name": "product2", "type": "consu"})
        self.product_tracking = self.env["product.product"].create(
            {"name": "product tracked", "type": "product", "tracking": "lot"}
        )
        self.product_no_quant = self.env["product.product"].create({"name": "no quant product", "type": "product"})

        def _create_receipt(self):
            return self.env["stock.picking"].create(
                {
                    "picking_type_id": self.env.ref("stock.picking_type_in").id,
                    "location_id": self.supplier_location.id,
                    "location_dest_id": self.stock_location.id,
                    "immediate_transfer": False,
                }
            )

        def _create_delivery(self):
            return self.env["stock.picking"].create(
                {
                    "picking_type_id": self.env.ref("stock.picking_type_out").id,
                    "location_id": self.stock_location.id,
                    "location_dest_id": self.supplier_location.id,
                    "immediate_transfer": False,
                }
            )

        def _create_move(self, product, qty, picking, uom=False):
            return self.env["stock.move"].create(
                {
                    "name": "move",
                    "product_id": product.id,
                    "product_uom": uom and uom.id or self.uom_unit.id,
                    "product_uom_qty": qty,
                    "picking_id": picking.id,
                    "location_id": picking.location_id.id,
                    "location_dest_id": picking.location_dest_id.id,
                }
            )

        # Put quantity in stock. Should be done and unmodified by the migration script.
        receipt_1 = _create_receipt(self)
        _create_move(self, self.product, 10, receipt_1, uom=self.uom_dozen)
        move_tracked = _create_move(self, self.product_tracking, 10, receipt_1)
        _create_move(self, self.product_consu, 10, receipt_1)
        receipt_1.action_confirm()
        receipt_1.move_line_ids.write({"qty_done": 10})
        move_tracked.move_line_ids.write({"qty_done": 5, "lot_name": "lot1"})
        move_tracked.move_line_ids.copy({"qty_done": 5, "lot_name": "lot2"})
        receipt_1.button_validate()

        # Nothing picked. Everything is generated by the system.
        receipt_2 = _create_receipt(self)
        _create_move(self, self.product, 10, receipt_2)
        _create_move(self, self.product_tracking, 10, receipt_2)
        _create_move(self, self.product_consu, 10, receipt_2)
        receipt_2.action_confirm()

        # Some quantities picked. We should keep the input user and sacrify the system generated ones.
        receipt_3 = _create_receipt(self)
        move_product = _create_move(self, self.product, 10, receipt_3)
        move_tracked = _create_move(self, self.product_tracking, 10, receipt_3)
        _create_move(self, self.product_consu, 10, receipt_3)
        receipt_3.action_confirm()
        move_product.move_line_ids.write({"qty_done": 7})
        initial_ml = move_tracked.move_line_ids
        initial_ml.copy({"qty_done": 2, "lot_name": "lot1"})
        initial_ml.copy({"qty_done": 4, "lot_name": "lot2"})

        delivery_1 = _create_delivery(self)
        _create_move(self, self.product, 1, delivery_1)
        delivery_1.action_confirm()
        delivery_1.action_assign()
        delivery_1.move_line_ids.write({"qty_done": 1})
        delivery_1.button_validate()
        delivery_2 = _create_delivery(self)
        move_product = _create_move(self, self.product, 4, delivery_2, uom=self.uom_dozen)
        move_tracked = _create_move(self, self.product_tracking, 7, delivery_2)
        _create_move(self, self.product_consu, 10, delivery_2)
        delivery_2.action_confirm()
        delivery_2.action_assign()
        # 2 lines. lot1 5 and lot 2 2
        move_product.move_line_ids.write({"qty_done": 4})
        move_tracked.move_line_ids[0].write({"qty_done": 3})

        delivery_3 = _create_delivery(self)
        _create_move(self, self.product, 1, delivery_3)
        _create_move(self, self.product_tracking, 1, delivery_3)
        _create_move(self, self.product_consu, 1, delivery_3)
        delivery_3.action_confirm()
        delivery_3.action_assign()

        # draft
        delivery_4 = _create_delivery(self)
        _create_move(self, self.product, 1, delivery_4)

        # No quant since reservation doens't exist. However migration should create the quant
        delivery_5 = _create_delivery(self)
        _create_move(self, self.product_no_quant, 5, delivery_5)
        delivery_5.action_confirm()
        delivery_5.action_assign()
        delivery_5.move_ids.write({"quantity_done": 5})

        return {
            "receipts": [receipt_1.id, receipt_2.id, receipt_3.id],
            "deliveries": [delivery_1.id, delivery_2.id, delivery_3.id, delivery_4.id, delivery_5.id],
            "products": [self.product.id, self.product_tracking.id, self.product_consu.id, self.product_no_quant.id],
        }

    def check(self, init):
        deliveries = self.env["stock.picking"].browse(init["deliveries"])
        receipts = self.env["stock.picking"].browse(init["receipts"])
        self.product, self.product_tracking, self.product_consu, self.product_no_quant = self.env[
            "product.product"
        ].browse(init["products"])
        self.stock_location = self.env.ref("stock.stock_location_stock")

        self.assertRecordValues(
            receipts[0].move_ids,
            [
                {"state": "done", "product_id": self.product.id, "quantity": 10, "picked": True},
                {"state": "done", "product_id": self.product_tracking.id, "quantity": 10, "picked": True},
                {"state": "done", "product_id": self.product_consu.id, "quantity": 10, "picked": True},
            ],
        )
        self.assertRecordValues(
            receipts[1].move_ids,
            [
                {"state": "confirmed", "product_id": self.product.id, "quantity": 0, "picked": False},
                {"state": "confirmed", "product_id": self.product_tracking.id, "quantity": 0, "picked": False},
                {"state": "confirmed", "product_id": self.product_consu.id, "quantity": 0, "picked": False},
            ],
        )
        self.assertRecordValues(
            receipts[2].move_ids,
            [
                {"state": "partially_available", "product_id": self.product.id, "quantity": 7, "picked": True},
                {"state": "partially_available", "product_id": self.product_tracking.id, "quantity": 6, "picked": True},
                {"state": "confirmed", "product_id": self.product_consu.id, "quantity": 0, "picked": False},
            ],
        )

        self.assertRecordValues(
            deliveries[0].move_ids,
            [
                {"state": "done", "product_id": self.product.id, "quantity": 1, "picked": True},
            ],
        )
        self.assertRecordValues(
            deliveries[1].move_ids,
            [
                {"state": "assigned", "product_id": self.product.id, "quantity": 4, "picked": True},
                {"state": "partially_available", "product_id": self.product_tracking.id, "quantity": 3, "picked": True},
                {"state": "confirmed", "product_id": self.product_consu.id, "quantity": 0, "picked": False},
            ],
        )
        self.assertRecordValues(
            deliveries[2].move_ids,
            [
                {"state": "confirmed", "product_id": self.product.id, "quantity": 0, "picked": False},
                {"state": "confirmed", "product_id": self.product_tracking.id, "quantity": 0, "picked": False},
                {"state": "confirmed", "product_id": self.product_consu.id, "quantity": 0, "picked": False},
            ],
        )
        self.assertRecordValues(
            deliveries[3].move_ids,
            [
                {"state": "draft", "product_id": self.product.id, "quantity": 0, "picked": False},
            ],
        )

        quants_tracked = self.env["stock.quant"]._gather(self.product_tracking, self.stock_location)
        quant_lot1 = quants_tracked.filtered(lambda q: q.lot_id.name == "lot1")
        quant_lot2 = quants_tracked - quant_lot1
        self.assertEqual(sum(quant_lot1.mapped("quantity")), 5)
        self.assertEqual(sum(quant_lot1.mapped("reserved_quantity")), 3)
        self.assertEqual(sum(quant_lot2.mapped("quantity")), 5)
        self.assertEqual(sum(quant_lot2.mapped("reserved_quantity")), 0)
        quants_product = self.env["stock.quant"]._gather(self.product, self.stock_location)
        # 120 (10 dozen) - 1 - 48 (4 dozen reserved)
        self.assertEqual(sum(quants_product.mapped("quantity")), 119)
        self.assertEqual(sum(quants_product.mapped("reserved_quantity")), 48)
        quant_no_quantity = self.env["stock.quant"]._gather(self.product_no_quant, self.stock_location)
        self.assertEqual(quant_no_quantity.quantity, 0)
        self.assertEqual(quant_no_quantity.reserved_quantity, 5)
