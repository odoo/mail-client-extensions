#!/usr/bin/env python3

import argparse
import logging
import os
from contextlib import closing

import psycopg2

parser = argparse.ArgumentParser(
    description="""Add a trigger to raise an error when a condition is met.
This tool is useful to detect where a change happens during an upgrade.

Example:
$ inject_trigger test_17_s ir_module_module update "new.state='installed' and new.name='stock'"
    """,
    formatter_class=argparse.RawDescriptionHelpFormatter,
)
parser.add_argument("db", help="DB on which to add the trigger")
parser.add_argument("table", help="Table on which to add the trigger")
parser.add_argument(
    "when",
    help="When to trigger the error, DROP will drop the trigger from the table, ignores the rest of the arguments",
    choices=["INSERT", "UPDATE", "DELETE", "DROP"],
    type=str.upper,
)
parser.add_argument(
    "cond",
    help="Condition to trigger the error. Could use wither `new` or `old` depending on the trigger `when` option.",
    nargs="?",
    default="",
)

args = parser.parse_args()

db = args.db
table = args.table
when = args.when.upper()
cond = args.cond.upper()
port = os.environ.get("PGPORT", 5432)

logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(message)s")
logger = logging.getLogger(__name__)

if when == "DROP":
    qs = [f"DROP TRIGGER IF EXISTS stop_upgrade ON {table};"]
else:
    qs = [
        """
        CREATE OR REPLACE
        FUNCTION provoke_error() RETURNS TRIGGER AS $$
        begin
            raise exception using message='Error for injected trigger';
        end
        $$ LANGUAGE PLPGSQL;
        """,
        f"""
        DROP TRIGGER IF EXISTS stop_upgrade ON {table};
        CREATE TRIGGER stop_upgrade
        AFTER {when}
            ON {table}
           FOR EACH ROW WHEN ({cond}) EXECUTE
        FUNCTION provoke_error();
        """,
    ]

with closing(psycopg2.connect(f"dbname={db} port={port}")) as conn, conn.cursor() as cr:
    logger.info("Executing on %r:\n%s", db, "\n".join(qs))
    for q in qs:
        cr.execute(q)
    conn.commit()
